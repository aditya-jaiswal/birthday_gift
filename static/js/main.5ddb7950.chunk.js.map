{"version":3,"sources":["Components/Header.js","Components/Wish.js","App.js","serviceWorker.js","index.js"],"names":["Header","this","props","data","project","github","address","city","social","map","network","key","name","href","url","className","id","type","num","bg","title","style","maxWidth","src","Component","Wish","profilepic","image","bio","street","state","zip","phone","email","resumeDownload","resumedownload","alt","App","foo","resumeData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5ddb7950.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ParticlesBg from \"particles-bg\";\n\nclass Header extends Component {\n  render() {\n    var name = \"Happy Birthday Doll\";\n    var description =\n      \"This is a random text to test the fonts and styles and color. might have to change it later\";\n    if (this.props.data) {\n      var project = this.props.data.project;\n      var github = this.props.data.github;\n\n      var city = this.props.data.address.city;\n      var networks = this.props.data.social.map(function (network) {\n        return (\n          <li key={network.name}>\n            <a href={network.url}>\n              <i className={network.className}></i>\n            </a>\n          </li>\n        );\n      });\n    }\n\n    return (\n      <header id=\"home\">\n        <ParticlesBg type=\"polygon\" num={12} bg={true} />\n        <nav id=\"nav-wrap\">\n          <a className=\"mobile-btn\" href=\"#nav-wrap\" title=\"Show navigation\">\n            Show navigation\n          </a>\n          <a className=\"mobile-btn\" href=\"#home\" title=\"Hide navigation\">\n            Hide navigation\n          </a>\n\n          <ul id=\"nav\" className=\"nav\">\n            <li className=\"current\">\n              <a className=\"smoothscroll\" href=\"#home\">\n                Home\n              </a>\n            </li>\n            <li>\n              <a className=\"smoothscroll\" href=\"#wish\">\n                Wish\n              </a>\n            </li>\n            <li>\n              <a className=\"smoothscroll\" href=\"#story\">\n                Story\n              </a>\n            </li>\n            <li>\n              <a className=\"smoothscroll\" href=\"#gallery\">\n                Gallery\n              </a>\n            </li>\n            <li>\n              <a className=\"smoothscroll\" href=\"#gift\">\n                Gift\n              </a>\n            </li>\n          </ul>\n        </nav>\n\n        <div className=\"row banner\">\n          <div className=\"banner-text\">\n            <h1 className=\"responsive-headline\">{name}</h1>\n            <h3 className=\"responsive-headline\">{description}.</h3>\n            <img style={{ maxWidth: \"20%\" }} src=\"images/cake.svg\" />\n          </div>\n        </div>\n\n        <p className=\"scrolldown\">\n          <a className=\"smoothscroll\" href=\"#about\">\n            <i className=\"icon-down-circle\"></i>\n          </a>\n        </p>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass Wish extends Component {\n  render() {\n    if (this.props.data) {\n      var name = this.props.data.name;\n      var profilepic = \"images/\" + this.props.data.image;\n      var bio = this.props.data.bio;\n      var street = this.props.data.address.street;\n      var city = this.props.data.address.city;\n      var state = this.props.data.address.state;\n      var zip = this.props.data.address.zip;\n      var phone = this.props.data.phone;\n      var email = this.props.data.email;\n      var resumeDownload = this.props.data.resumedownload;\n    }\n\n    return (\n      <section id=\"wish\">\n        <div className=\"row\">\n          <div className=\"three columns\">\n            <img\n              className=\"profile-pic\"\n              src={profilepic}\n              alt=\"Nordic Giant Profile Pic\"\n            />\n          </div>\n          <div className=\"nine columns main-col\">\n            <h2>About Me</h2>\n\n            <p>{bio}</p>\n            <div className=\"row\">\n              <div className=\"columns contact-details\">\n                <h2>Contact Details</h2>\n                <p className=\"address\">\n                  <span>{name}</span>\n                  <br />\n                  <span>\n                    {street}\n                    <br />\n                    {city} {state}, {zip}\n                  </span>\n                  <br />\n                  <span>{phone}</span>\n                  <br />\n                  <span>{email}</span>\n                </p>\n              </div>\n              <div className=\"columns download\">\n                <p>\n                  <a href={resumeDownload} className=\"button\">\n                    <i className=\"fa fa-download\"></i>Download Resume\n                  </a>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Wish;\n","import React, { Component } from \"react\";\n// import ReactGA from 'react-ga';\n// import $ from \"jquery\";\nimport \"./App.css\";\nimport Header from \"./Components/Header\";\nimport Footer from \"./Components/Footer\";\nimport Wish from \"./Components/Wish\";\nimport Resume from \"./Components/Story\";\nimport Contact from \"./Components/Gallery\";\nimport Portfolio from \"./Components/Gift\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      foo: \"bar\",\n      resumeData: {},\n    };\n\n    // ReactGA.initialize('UA-110570651-1');\n    // ReactGA.pageview(window.location.pathname);\n  }\n\n  // getResumeData() {\n  //   $.ajax({\n  //     url: \"./resumeData.json\",\n  //     dataType: \"json\",\n  //     cache: false,\n  //     success: function (data) {\n  //       this.setState({ resumeData: data });\n  //     }.bind(this),\n  //     error: function (xhr, status, err) {\n  //       console.log(err);\n  //       alert(err);\n  //     },\n  //   });\n  // }\n\n  // componentDidMount() {\n  //   // this.getResumeData();\n  // }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header /> {/* data={this.state.resumeData.main}/> */}\n        <Wish />\n        {/* data={this.state.resumeData.main}/> \n        <Resume />\n        {/* data={this.state.resumeData.resume}/> \n        <Portfolio />\n        {/* data={this.state.resumeData.portfolio}/> \n        <Contact />\n        {/* data={this.state.resumeData.main}/> \n        <Footer />\n        {/* data={this.state.resumeData.main}/> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}